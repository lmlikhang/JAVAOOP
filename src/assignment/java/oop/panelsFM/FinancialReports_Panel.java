/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package assignment.java.oop.panelsFM;

import javax.swing.*;
import java.io.*;
import java.io.FileOutputStream;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.text.SimpleDateFormat;
import java.util.Date;




/**
 *
 * @author user
 */
public class FinancialReports_Panel extends javax.swing.JPanel {

    /**
     * Creates new form FinancialReports_Panel
     */
    public FinancialReports_Panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtReportArea = new javax.swing.JTextArea();
        generateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMonth = new javax.swing.JTextField();
        btnPrint = new javax.swing.JButton();
        btnExportPdf = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        txtReportArea.setColumns(20);
        txtReportArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtReportArea.setRows(5);
        jScrollPane1.setViewportView(txtReportArea);

        generateButton.setText("Generate Report");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Financial Summary Report");

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Choose Month");

        btnPrint.setText("Print Report");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnExportPdf.setText("Export PDF");
        btnExportPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(132, 132, 132)
                                    .addComponent(generateButton))
                                .addComponent(btnPrint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExportPdf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton))
                .addGap(18, 18, 18)
                .addComponent(btnPrint)
                .addGap(18, 18, 18)
                .addComponent(btnExportPdf)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        generateReport();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
        boolean done = txtReportArea.print();
        if (done) {
            JOptionPane.showMessageDialog(this, "Report sent to printer.");
        } else {
            JOptionPane.showMessageDialog(this, "Printing canceled.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error printing:\n" + e.getMessage());
    }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnExportPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPdfActionPerformed
        try {
        String content = txtReportArea.getText();
        if (content.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Report is empty. Generate it first.");
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save PDF");
        fileChooser.setSelectedFile(new java.io.File("Financial_Report.pdf"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File fileToSave = fileChooser.getSelectedFile();

            Document document = new Document();
            PdfWriter.getInstance(document, new java.io.FileOutputStream(fileToSave));
            document.open();
            document.add(new Paragraph(content));
            document.close();

            JOptionPane.showMessageDialog(this, "PDF saved to:\n" + fileToSave.getAbsolutePath());
        }

    } catch (DocumentException | IOException e) {
        JOptionPane.showMessageDialog(this, "Error exporting to PDF:\n" + e.getMessage());
    }
    }//GEN-LAST:event_btnExportPdfActionPerformed

    private String convertToDatePrefix(String input) {
    try {
        java.text.DateFormat inputFormat = new java.text.SimpleDateFormat("MMMM yyyy"); 
        java.util.Date date = inputFormat.parse(input);
        java.text.DateFormat outputFormat = new java.text.SimpleDateFormat("yyyy-MM");  
        return outputFormat.format(date);
    } catch (java.text.ParseException e) {
        return null;
    }
}

    private void generateReport() {
        
        int paidCount = 0;
        double totalAmount = 0;
        String userInput = txtMonth.getText().trim();
        String filterMonth = convertToDatePrefix(userInput); 
        if (filterMonth == null) {
        JOptionPane.showMessageDialog(this, "Please enter month as 'Month YYYY' (e.g., May 2025)");
        return;
    }
        
    
    

        StringBuilder report = new StringBuilder("=== Financial Report ===\n\n");

    File file = new File("src/assignment/java/oop/FM data/purchase_orders.txt");
    if (!file.exists()) {
        txtReportArea.setText("purchase_orders.txt file not found.");
        return;
    }

    try (BufferedReader br = new BufferedReader(new FileReader(file))) {

    SimpleDateFormat sourceFormat = new SimpleDateFormat("dd-MM-yyyy");
    SimpleDateFormat targetFormat = new SimpleDateFormat("yyyy-MM");

    String line;
    while ((line = br.readLine()) != null) {
        String[] parts = line.split(",");
        if (parts.length >= 7 && parts[5].equalsIgnoreCase("Paid")) {
            try {
                Date orderDate = sourceFormat.parse(parts[6]);
                String orderMonth = targetFormat.format(orderDate);

                if (!orderMonth.equals(filterMonth)) continue;

                
                String poID = parts[0];
                String supplier = parts[1];
                String item = parts[2];
                int qty = Integer.parseInt(parts[3]);
                double unitPrice = Double.parseDouble(parts[4]);
                double total = qty * unitPrice;

                report.append(String.format(
                    "PO ID: %s | Supplier: %s | Item: %s | Qty: %d | RM %.2f\n",
                    poID, supplier, item, qty, total));
                paidCount++;
                totalAmount += total;

            } catch (java.text.ParseException e) {
                // If the date is badly formatted, skip this line
                System.err.println("Invalid date format in line: " + line);
            }
        }
    }

        report.append("\n-----------------------------\n");
        report.append("Total Paid POs: ").append(paidCount).append("\n");
        report.append(String.format("Total Payments Made: RM %.2f", totalAmount));

        txtReportArea.setText(report.toString());

    } catch (IOException | NumberFormatException e) {
        JOptionPane.showMessageDialog(this,
                "Error reading purchase_orders.txt:\n" + e.getMessage(),
                "File Error",
                JOptionPane.ERROR_MESSAGE);
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportPdf;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextArea txtReportArea;
    // End of variables declaration//GEN-END:variables
}
